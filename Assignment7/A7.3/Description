Write an equivalent C program called q1.c that is the most likely candidate for the file that was compiled into q1.s. The .c file must compile and execute. When it executes it must perform the same computation as the .s file and print out the value of its static variables, one per line as a decimal number (nothing other than that number on each line). This means that q1.c must print 10 lines of numbers.

Note that the original code includes a start procedure, a main function and one more helper function. You should not include the start procedure in q1.c, as this procedure is added automatically by the C compiler to initialize the stack and call main. You must, however, include both the main function and the additional function. As mentioned above, you must also include, at the end of your main function, code that will print the value of the program's ten static variables.

Except for main, you may use any function and variables as you wish, but they must match the function and variable names that you used in the assembly-file comments in the previous question. You must also ensure that there is a correspondence between lines in the assembly file and lines of the C program. Note that, even if your code gets 100% in the autograder, TA graders will still manually check your code to ensure it complies with the naming convention above.

You may notice registers being used in a way that is best explained by saying that it is a local variable, even if its value is never read from or written to the stack. Avoiding these memory accesses is a common optimization compilers make for local variables. Because of this, it is acceptable to include local variables that are not stored in the stack in the assembly code
